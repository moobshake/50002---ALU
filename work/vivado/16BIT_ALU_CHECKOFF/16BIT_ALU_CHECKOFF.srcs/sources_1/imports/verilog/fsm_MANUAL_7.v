/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsm_MANUAL_7 (
    input clk,
    input rst,
    input [1:0] button,
    input [23:0] in,
    output reg [15:0] aluOut,
    output reg [31:0] displayOUT,
    output reg [5:0] opOUT
  );
  
  
  
  reg [15:0] M_first_d, M_first_q = 1'h0;
  reg [15:0] M_second_d, M_second_q = 1'h0;
  reg [5:0] M_opcode_d, M_opcode_q = 1'h0;
  reg [15:0] M_result_d, M_result_q = 1'h0;
  reg [0:0] M_z_d, M_z_q = 1'h0;
  reg [0:0] M_v_d, M_v_q = 1'h0;
  reg [0:0] M_n_d, M_n_q = 1'h0;
  reg [31:0] M_display_d, M_display_q = 1'h0;
  localparam FIRSTINPUT_brain = 3'd0;
  localparam SECONDINPUT_brain = 3'd1;
  localparam OPCODE_brain = 3'd2;
  localparam RESULT_brain = 3'd3;
  localparam AUTO_brain = 3'd4;
  localparam ILLEGAL_brain = 3'd5;
  
  reg [2:0] M_brain_d, M_brain_q = FIRSTINPUT_brain;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu16bit_12 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  localparam ADDOP = 6'h00;
  
  localparam SUBOP = 6'h01;
  
  localparam ANDOP = 6'h18;
  
  localparam OROP = 6'h1e;
  
  localparam XOROP = 6'h16;
  
  localparam ALDROP = 6'h1a;
  
  localparam SHLOP = 6'h20;
  
  localparam SHROP = 6'h21;
  
  localparam SRAOP = 6'h23;
  
  localparam CMPEQOP = 6'h33;
  
  localparam CMPLTOP = 6'h35;
  
  localparam CMPLEOP = 6'h37;
  
  always @* begin
    M_brain_d = M_brain_q;
    M_result_d = M_result_q;
    M_v_d = M_v_q;
    M_display_d = M_display_q;
    M_z_d = M_z_q;
    M_opcode_d = M_opcode_q;
    M_n_d = M_n_q;
    M_first_d = M_first_q;
    M_second_d = M_second_q;
    
    M_alu_a = M_first_q;
    M_alu_b = M_second_q;
    M_alu_alufn = M_opcode_q;
    aluOut = M_result_q;
    M_z_d = M_alu_z;
    M_v_d = M_alu_v;
    M_n_d = M_alu_n;
    displayOUT = M_display_q;
    opOUT = M_opcode_q;
    
    case (M_brain_q)
      AUTO_brain: begin
        if (button[0+0-:1]) begin
          M_brain_d = FIRSTINPUT_brain;
        end else begin
          M_brain_d = AUTO_brain;
        end
      end
      FIRSTINPUT_brain: begin
        if (button[1+0-:1]) begin
          M_first_d[0+7-:8] = in[0+7-:8];
          M_first_d[8+7-:8] = in[8+7-:8];
          M_brain_d = SECONDINPUT_brain;
        end else begin
          if (button[0+0-:1]) begin
            M_first_d[0+15-:16] = 1'h0;
            M_second_d[0+15-:16] = 1'h0;
            M_opcode_d[0+5-:6] = 1'h0;
            M_z_d = 1'h0;
            M_v_d = 1'h0;
            M_n_d = 1'h0;
            M_brain_d = AUTO_brain;
          end else begin
            M_result_d[0+7-:8] = in[0+7-:8];
            M_result_d[8+7-:8] = in[8+7-:8];
            M_display_d = 32'h030e140b;
            M_brain_d = FIRSTINPUT_brain;
          end
        end
      end
      SECONDINPUT_brain: begin
        if (button[1+0-:1]) begin
          M_second_d[0+7-:8] = in[0+7-:8];
          M_second_d[8+7-:8] = in[8+7-:8];
          M_brain_d = OPCODE_brain;
        end else begin
          if (button[0+0-:1]) begin
            M_first_d[0+15-:16] = 1'h0;
            M_second_d[0+15-:16] = 1'h0;
            M_opcode_d[0+5-:6] = 1'h0;
            M_z_d = 1'h0;
            M_v_d = 1'h0;
            M_n_d = 1'h0;
            M_brain_d = AUTO_brain;
          end else begin
            M_result_d[0+7-:8] = in[0+7-:8];
            M_result_d[8+7-:8] = in[8+7-:8];
            M_display_d = 32'h030e1410;
            M_brain_d = SECONDINPUT_brain;
          end
        end
      end
      OPCODE_brain: begin
        if (button[1+0-:1]) begin
          if (M_opcode_q == 6'h00 || M_opcode_q == 6'h01 || M_opcode_q == 6'h18 || M_opcode_q == 6'h1e || M_opcode_q == 6'h16 || M_opcode_q == 6'h1a || M_opcode_q == 6'h20 || M_opcode_q == 6'h21 || M_opcode_q == 6'h23 || M_opcode_q == 6'h33 || M_opcode_q == 6'h35 || M_opcode_q == 6'h37) begin
            M_brain_d = RESULT_brain;
          end else begin
            M_brain_d = ILLEGAL_brain;
          end
        end else begin
          if (button[0+0-:1]) begin
            M_first_d[0+15-:16] = 1'h0;
            M_second_d[0+15-:16] = 1'h0;
            M_opcode_d[0+5-:6] = 1'h0;
            M_z_d = 1'h0;
            M_v_d = 1'h0;
            M_n_d = 1'h0;
            M_brain_d = AUTO_brain;
          end else begin
            M_result_d[0+7-:8] = 1'h0;
            M_result_d[8+7-:8] = 1'h0;
            M_opcode_d = in[16+0+5-:6];
            M_display_d = 32'h03aa000a;
            M_brain_d = OPCODE_brain;
          end
        end
      end
      ILLEGAL_brain: begin
        if (button[1+0-:1]) begin
          M_brain_d = OPCODE_brain;
        end else begin
          if (button[0+0-:1]) begin
            M_first_d[0+15-:16] = 1'h0;
            M_second_d[0+15-:16] = 1'h0;
            M_opcode_d[0+5-:6] = 1'h0;
            M_z_d = 1'h0;
            M_v_d = 1'h0;
            M_n_d = 1'h0;
            M_brain_d = AUTO_brain;
          end else begin
            M_display_d = 32'h030e0f0f;
            M_brain_d = ILLEGAL_brain;
          end
        end
      end
      RESULT_brain: begin
        if (button[1+0-:1]) begin
          M_first_d[0+15-:16] = 1'h0;
          M_second_d[0+15-:16] = 1'h0;
          M_opcode_d[0+5-:6] = 1'h0;
          M_z_d = 1'h0;
          M_v_d = 1'h0;
          M_n_d = 1'h0;
          M_brain_d = FIRSTINPUT_brain;
        end else begin
          if (button[0+0-:1]) begin
            M_first_d[0+15-:16] = 1'h0;
            M_second_d[0+15-:16] = 1'h0;
            M_opcode_d[0+5-:6] = 1'h0;
            M_z_d = 1'h0;
            M_v_d = 1'h0;
            M_n_d = 1'h0;
            M_brain_d = AUTO_brain;
          end else begin
            M_display_d[24+7-:8] = 8'h03;
            M_display_d[16+7-:8] = M_z_q;
            M_display_d[8+7-:8] = M_v_q;
            M_display_d[0+7-:8] = M_n_q;
            M_result_d = M_alu_out;
            M_brain_d = RESULT_brain;
          end
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_brain_q <= M_brain_d;
    
    if (rst == 1'b1) begin
      M_first_q <= 1'h0;
      M_second_q <= 1'h0;
      M_opcode_q <= 1'h0;
      M_result_q <= 1'h0;
      M_z_q <= 1'h0;
      M_v_q <= 1'h0;
      M_n_q <= 1'h0;
      M_display_q <= 1'h0;
    end else begin
      M_first_q <= M_first_d;
      M_second_q <= M_second_d;
      M_opcode_q <= M_opcode_d;
      M_result_q <= M_result_d;
      M_z_q <= M_z_d;
      M_v_q <= M_v_d;
      M_n_q <= M_n_d;
      M_display_q <= M_display_d;
    end
  end
  
endmodule
