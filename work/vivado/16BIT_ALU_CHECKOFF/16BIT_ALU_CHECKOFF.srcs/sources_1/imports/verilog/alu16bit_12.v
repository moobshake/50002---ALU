/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16bit_12 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_adder_out;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [1-1:0] M_adder_alufn0;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  adder16bit_13 adder (
    .alufn0(M_adder_alufn0),
    .a(M_adder_a),
    .b(M_adder_b),
    .out(M_adder_out),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_shifter_out;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  reg [2-1:0] M_shifter_alufn10;
  shifter16bit_14 shifter (
    .a(M_shifter_a),
    .b(M_shifter_b),
    .alufn10(M_shifter_alufn10),
    .out(M_shifter_out)
  );
  
  wire [16-1:0] M_comparator_out;
  reg [2-1:0] M_comparator_alufn21;
  reg [1-1:0] M_comparator_z;
  reg [1-1:0] M_comparator_v;
  reg [1-1:0] M_comparator_n;
  compare16bit_15 comparator (
    .alufn21(M_comparator_alufn21),
    .z(M_comparator_z),
    .v(M_comparator_v),
    .n(M_comparator_n),
    .out(M_comparator_out)
  );
  
  wire [16-1:0] M_bool_out;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [4-1:0] M_bool_alufn30;
  bool16bit_16 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn30(M_bool_alufn30),
    .out(M_bool_out)
  );
  
  always @* begin
    out = 1'h0;
    M_adder_alufn0 = alufn[0+0-:1];
    M_adder_a = a;
    M_adder_b = b;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_shifter_alufn10 = alufn[0+1-:2];
    M_shifter_a = a;
    M_shifter_b = b;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn30 = alufn[0+3-:4];
    M_comparator_z = M_adder_z;
    M_comparator_v = M_adder_v;
    M_comparator_n = M_adder_n;
    M_comparator_alufn21 = alufn[1+1-:2];
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_adder_out;
      end
      2'h1: begin
        out = M_bool_out;
      end
      2'h2: begin
        out = M_shifter_out;
      end
      2'h3: begin
        out = M_comparator_out;
      end
    endcase
  end
endmodule
