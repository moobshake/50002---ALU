module fsm_AUTO (
    input clk,  // clock
    input rst,  // reset
    input button[2], // push buttons to recieve inputs to start or change states
    input in [3][8], // get the input from the dip switch
    output aluOut[16], // alu output. to be shown in the io_leds
    output displayOUT[4][8], // seven segment display output
    output opOUT[6], // display what aluFN it is running currently
    output inputMode // check if need take in user input mode
  ) {
  .clk(clk){
    .rst(rst) {
      dff first[16](#INIT(0)); // store 16 bit input a
      dff second[16](#INIT(0)); // store 16 bit input b
      dff aluFN[6](#INIT(0)); // store 6 bit aluFN
      dff result[16](#INIT(0)); // store 16 bit for output on led
      dff z[1](#INIT(0)); // store 1 bit z
      dff v[1](#INIT(0)); // store 1 bit v
      dff n[1](#INIT(0)); // store 1 bit n
      dff display[4][8]; // store what to display on 7 segment displays
      dff inputModeStore[1](#INIT(0)); // store the input mode for the special mode
    }
    fsm brain = {MANUAL, IDLE, TESTAUTO, TESTAUTOINPUT}; // main fsm in this auto module
    fsm autoBrain = {ADD, SUB, AND, OR, XOR, ALDR, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE, MUL, DIV, NAND, NOR, XNOR}; // fsm that runs through all the instructions
    fsm autoInputBrain = {INPUTA, INPUTB, RUN}; // intermediatery fsm to take inputs from the user then run the autoBrain
  }
  
  alu16bit alu; // call the alu.luc
  
  // list of test variables // can use hexdecimals also
  // set the two inpts and key in the supposed output. will print 'P' if matches and 'F' if fails
  const ADDOP = 6b000000;
  const ADDTESTA = 16h4000;
  const ADDTESTB = 16h4000;
  const ADDCORRECT = 16h8000;
  const ADDCORRECTZVN = 3b011;
  
  const SUBOP = 6b000001;
  const SUBTESTA = 16h8000;
  const SUBTESTB = 16h0001;
  const SUBCORRECT = 16h7FFF;
  const SUBCORRECTZVN = 3b010;
  
  const MULOP = 6b001000;
  const MULTESTA = 16h4000;
  const MULTESTB = 16h0002;
  const MULCORRECT = 16h8000;
  const MULCORRECTZVN = 3b011;
  
  const DIVOP = 6b001001;
  const DIVTESTA = 16h7FFF;
  const DIVTESTB = 16hFFFF;
  const DIVCORRECT = 16h8001;
  const DIVCORRECTZVN = 3b001;
  
  const ANDOP = 6b011000;
  const ANDTESTA = 16h0003;
  const ANDTESTB = 16h0005;
  const ANDCORRECT = 16h0001;
  
  const NANDOP = 6b010111;
  const NANDTESTA = 16hFFF3;
  const NANDTESTB = 16hFFF5;
  const NANDCORRECT = 16h000E;
  
  const OROP = 6b011110;
  const ORTESTA = 16h0003;
  const ORTESTB = 16h0005;
  const ORCORRECT = 16h0007;
  
  const NOROP = 6b010001;
  const NORTESTA = 16hFFF3;
  const NORTESTB = 16hFFF5;
  const NORCORRECT = 16h0008;
  
  const XOROP = 6b010110;
  const XORTESTA = 16h0003;
  const XORTESTB = 16h0005;
  const XORCORRECT = 16h0006;
  
  const XNOROP = 6b011001;
  const XNORTESTA = 16hFFF3;
  const XNORTESTB = 16h0005;
  const XNORCORRECT = 16h0009;
  
  const ALDROP = 6b011010;
  const ALDRTESTA = 16h0003;
  const ALDRTESTB = 16h0005;
  const ALDRCORRECT = 16h0003;
  
  const SHLOP = 6b100000;
  const SHLTESTA = 16h7000;
  const SHLTESTB = 16h0001;
  const SHLCORRECT = 16h8000;
  
  const SHROP = 6b100001;
  const SHRTESTA = 16h0080;
  const SHRTESTB = 16h0004;
  const SHRCORRECT = 16h0008;
  
  const SRAOP = 6b100011;
  const SRATESTA = 16h8000;
  const SRATESTB = 16h0004;
  const SRACORRECT = 16hF800;
  
  const CMPEQOP = 6b110011;
  const CMPEQTESTA = 16hFFFF;
  const CMPEQTESTB = 16hFFFF;
  const CMPEQCORRECT = 16h0001;
  const CMPEQCORRECTZVN = 3b110;
  
  const CMPLTOP = 6b110101;
  const CMPLTTESTA = 16hFFFF;
  const CMPLTTESTB = 16h7FFF;
  const CMPLTCORRECT = 16h0001;
  const CMPLTCORRECTZVN = 3b001;
  
  const CMPLEOP = 6b110111;
  const CMPLETESTA = 16h8000;
  const CMPLETESTB = 16h0001;
  const CMPLECORRECT = 16h0001;
  const CMPLECORRECTZVN = 3b011;
  
  const SLOWCLOCK_SIZE = 29; // change to smaller number for faster switching of states
  counter slowClock(#SIZE(SLOWCLOCK_SIZE), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
  
  always {
    // standard inputs and outputs for the main fsm.
    slowClockEdge.in = slowClock.value[SLOWCLOCK_SIZE-1]; 
    aluOut = result.q;
    displayOUT = display.q;
    opOUT = aluFN.q;
    alu.a = first.q;
    alu.b = second.q;
    alu.alufn = aluFN.q;
    aluOut = result.q;
    z.d = alu.z;
    v.d = alu.v;
    n.d = alu.n;
    inputMode = inputModeStore.q;
    
    // start of main fsm module
    case(brain.q) {
      // main state when in manual mode ********************************
      brain.MANUAL: 
        if (button[0]) { // transition from manual to auto
          brain.d = brain.IDLE;
        } 
        else {
          inputModeStore.d = 0;
          brain.d = brain.MANUAL;
        }
      // idle state to wait for user to choose which automode ********************************
      brain.IDLE:
        inputModeStore.d = in[2][7];
        if (button[1] && in[2][7]) { // start the auto run through with inputs
          brain.d = brain.TESTAUTOINPUT;
        } 
        else if (button[1]) { // normal auto mode, with pre-defined inputs from the 'const' above
          brain.d = brain.TESTAUTO;
        }
        else if (button[0]) { // goes back to manual mode
          brain.d = brain.MANUAL; 
        } 
        else {
          display.d = {8hb, 8h11, 8h12, 8h0}; // 'AUTO'
          result.d = 16b1111111111111111;
          aluFN.d = 6b111111;
          brain.d = brain.IDLE;
        }
        
      // mode that get user to input two 16-bit and then will run through all the aluFN and display the output ****************
      brain.TESTAUTOINPUT:
        inputModeStore.d = in[2][7];
        if (button[1] && in[2][7] == 0) { // restart the auto mode and reset all the FSM to original state
          autoInputBrain.d = autoInputBrain.INPUTA;
          autoBrain.d = autoBrain.ADD;
          brain.d = brain.IDLE;
        } 
        else if (button[0]) { // goes back to manual mode and reset all the FSM to original state
          autoInputBrain.d = autoInputBrain.INPUTA;
          autoBrain.d = autoBrain.ADD;
          brain.d = brain.MANUAL; 
        } 
        else {
          brain.d = brain.TESTAUTOINPUT;
          // running the intermediate fsm that takes in user inputs first ----------------------
          case (autoInputBrain.q) {
            autoInputBrain.INPUTA: // first input ---------------------------
              if (button[1]) {
                first.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
                first.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
                autoInputBrain.d = autoInputBrain.INPUTB;
              } 
              else {
                result.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
                result.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
                display.d = {8hb, 8he, 8h14, 8hb};  // 'AInA'
                autoInputBrain.d = autoInputBrain.INPUTA;
              }
            autoInputBrain.INPUTB: // second input -----------------------------
              if (button[1]) {
                second.d[7:0] = in[0];
                second.d[15:8] = in[1];
                autoInputBrain.d = autoInputBrain.RUN;
              }
              else {
                result.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
                result.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
                display.d = {8hb, 8he, 8h14, 8h10};  // 'AInb'
                autoInputBrain.d = autoInputBrain.INPUTB;
              }
            autoInputBrain.RUN: // auto running of all the aluFNs -----------------
              if (button[1]) { // restart the auto running and get the inputs agains
                autoBrain.d = autoBrain.ADD;
                first.d[15:0] = 0;
                second.d[15:0] = 0;
                aluFN.d[5:0] = 0;
                z.d = 0;
                v.d = 0;
                n.d = 0;
                autoInputBrain.d = autoInputBrain.INPUTA;
              }
              else {
                display.d[3] = 8h15;
                display.d[2] = z.q;
                display.d[1] = v.q;
                display.d[0] = n.q;
                result.d = alu.out;
                autoInputBrain.d = autoInputBrain.RUN;
                // running all the aluFNs with the user inputs ++++++++++++++++++++++++++++++++
                case (autoBrain.q) {
                  autoBrain.ADD:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.SUB;
                    }
                    else {
                      aluFN.d = ADDOP;
                      autoBrain.d = autoBrain.ADD;
                    }                    
                  autoBrain.SUB:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.AND;
                    }
                    else {
                      aluFN.d = SUBOP;
                      autoBrain.d = autoBrain.SUB;
                    }
                  autoBrain.AND:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.OR;
                    }
                    else {
                      aluFN.d = ANDOP;
                      autoBrain.d = autoBrain.AND;
                    }
                  autoBrain.OR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.XOR;
                    }
                    else {
                      aluFN.d = OROP;
                      autoBrain.d = autoBrain.OR;
                    }
                  autoBrain.XOR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.ALDR;
                    }
                    else {
                      aluFN.d = XOROP;
                      autoBrain.d = autoBrain.XOR;
                    }
                  autoBrain.ALDR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.SHL;
                    }
                    else {
                      aluFN.d = ALDROP;
                      autoBrain.d = autoBrain.ALDR;
                    }
                  autoBrain.SHL:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.SHR;
                    }
                    else {
                      aluFN.d = SHLOP;
                      autoBrain.d = autoBrain.SHL;
                    }
                  autoBrain.SHR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.SRA;
                    }
                    else {
                      aluFN.d = SHROP;
                      autoBrain.d = autoBrain.SHR;
                    }
                  autoBrain.SRA:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.CMPEQ;
                    }
                    else {
                      aluFN.d = SRAOP;
                      autoBrain.d = autoBrain.SRA;
                    }
                  autoBrain.CMPEQ:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.CMPLT;
                    }
                    else {
                      aluFN.d = CMPEQOP;
                      autoBrain.d = autoBrain.CMPEQ;
                    }
                  autoBrain.CMPLT:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.CMPLE;
                    }
                    else {
                      aluFN.d = CMPLTOP;
                      autoBrain.d = autoBrain.CMPLT;
                    }
                  autoBrain.CMPLE:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.MUL;
                    }
                    else {
                      aluFN.d = CMPLEOP;
                      autoBrain.d = autoBrain.CMPLE;
                    }
                  autoBrain.MUL:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.DIV;
                    }
                    else {
                      aluFN.d = MULOP;
                      autoBrain.d = autoBrain.MUL;
                    }
                  autoBrain.DIV:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.NAND;
                    }
                    else {
                      aluFN.d = DIVOP;
                      autoBrain.d = autoBrain.DIV;
                    }
                  autoBrain.NAND:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.NOR;
                    }
                    else {
                      aluFN.d = NANDOP;
                      autoBrain.d = autoBrain.NAND;
                    }
                  autoBrain.NOR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.XNOR;
                    }
                    else {
                      aluFN.d = NOROP;
                      autoBrain.d = autoBrain.NOR;
                    }
                  autoBrain.XNOR:
                    if (slowClockEdge.out == b1) {
                      autoBrain.d = autoBrain.ADD;
                    }
                    else {
                      aluFN.d = XNOROP;
                      autoBrain.d = autoBrain.XNOR;                          
                    }
                }
              }
          }
        }
        
      // mode that will run the pre-defined inputs and see whether the results match the pre-defined values *********************
      brain.TESTAUTO:
        inputModeStore.d = in[2][7];
        if (button[1]) { // restart the auto mode
          autoBrain.d = autoBrain.ADD;
          brain.d = brain.IDLE;
        } 
        else if (button[0]) { // goes back to manual mode
          autoBrain.d = autoBrain.ADD;
          brain.d = brain.MANUAL; 
        } 
        else {
          brain.d = brain.TESTAUTO;
          display.d[2] = z.q;
          display.d[1] = v.q;
          display.d[0] = n.q;
          result.d = alu.out;
          // fsm that runs through everything, similar to the above autoInputBrain fsm --------------------------------------------------------
          case (autoBrain.q) {
            autoBrain.ADD:
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.SUB;
              }
              else {
                // check if the results matches for 16-bit output and ZVN, show on first 7-seg display +++++++++++++++++++++++++++++++++++++
                if (result.q == ADDCORRECT && z.q == ADDCORRECTZVN[2] && v.q == ADDCORRECTZVN[1] && n.q == ADDCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = ADDTESTA;
                second.d = ADDTESTB;
                aluFN.d = ADDOP;
                autoBrain.d = autoBrain.ADD;
              }
            autoBrain.SUB:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.AND;
              }
              else {
                if (result.q == SUBCORRECT && z.q == SUBCORRECTZVN[2] && v.q == SUBCORRECTZVN[1] && n.q == SUBCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = SUBTESTA;
                second.d = SUBTESTB;
                aluFN.d = SUBOP;
                autoBrain.d = autoBrain.SUB;
              }
            autoBrain.AND:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.OR;
              }
              else {
                if (result.q == ANDCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = ANDTESTA;
                second.d = ANDTESTB;
                aluFN.d = ANDOP;
                autoBrain.d = autoBrain.AND;
              }
            autoBrain.OR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.XOR;
              }
              else {
                if (result.q == ORCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = ORTESTA;
                second.d = ORTESTB;
                aluFN.d = OROP;
                autoBrain.d = autoBrain.OR;
              }
            autoBrain.XOR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.ALDR;
              }
              else {
                if (result.q == XORCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = XORTESTA;
                second.d = XORTESTB;
                aluFN.d = XOROP;
                autoBrain.d = autoBrain.XOR;
              }
            autoBrain.ALDR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.SHL;
              }
              else {
                if (result.q == ALDRCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = ALDRTESTA;
                second.d = ALDRTESTB;
                aluFN.d = ALDROP;
                autoBrain.d = autoBrain.ALDR;
              }
            autoBrain.SHL:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.SHR;
              }
              else {
                if (result.q == SHLCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = SHLTESTA;
                second.d = SHLTESTB;
                aluFN.d = SHLOP;
                autoBrain.d = autoBrain.SHL;
              }
            autoBrain.SHR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.SRA;
              }
              else {
                if (result.q == SHRCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = SHRTESTA;
                second.d = SHRTESTB;
                aluFN.d = SHROP;
                autoBrain.d = autoBrain.SHR;
              }
            autoBrain.SRA:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.CMPEQ;
              }
              else {
                if (result.q == SRACORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = SRATESTA;
                second.d = SRATESTB;
                aluFN.d = SRAOP;
                autoBrain.d = autoBrain.SRA;
              }
            autoBrain.CMPEQ:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.CMPLT;
              }
              else {
                if (result.q == CMPEQCORRECT && z.q == CMPEQCORRECTZVN[2] && v.q == CMPEQCORRECTZVN[1] && n.q == CMPEQCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = CMPEQTESTA;
                second.d = CMPEQTESTB;
                aluFN.d = CMPEQOP;
                autoBrain.d = autoBrain.CMPEQ;
              }
            autoBrain.CMPLT:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.CMPLE;
              }
              else {
                if (result.q == CMPLTCORRECT && z.q == CMPLTCORRECTZVN[2] && v.q == CMPLTCORRECTZVN[1] && n.q == CMPLTCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = CMPLTTESTA;
                second.d = CMPLTTESTB;
                aluFN.d = CMPLTOP;
                autoBrain.d = autoBrain.CMPLT;
              }
            autoBrain.CMPLE:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.MUL;
              }
              else {
                if (result.q == CMPLECORRECT && z.q == CMPLECORRECTZVN[2] && v.q == CMPLECORRECTZVN[1] && n.q == CMPLECORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = CMPLETESTA;
                second.d = CMPLETESTB;
                aluFN.d = CMPLEOP;
                autoBrain.d = autoBrain.CMPLE;
              }
            autoBrain.MUL:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.DIV;
              }
              else {
                if (result.q == MULCORRECT && z.q == MULCORRECTZVN[2] && v.q == MULCORRECTZVN[1] && n.q == MULCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = MULTESTA;
                second.d = MULTESTB;
                aluFN.d = MULOP;
                autoBrain.d = autoBrain.MUL;
              }
            autoBrain.DIV:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.NAND;
              }
              else {
                if (result.q == DIVCORRECT && z.q == DIVCORRECTZVN[2] && v.q == DIVCORRECTZVN[1] && n.q == DIVCORRECTZVN[0]) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = DIVTESTA;
                second.d = DIVTESTB;
                aluFN.d = DIVOP;
                autoBrain.d = autoBrain.DIV;
              }
            autoBrain.NAND:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.NOR;
              }
              else {
                if (result.q == NANDCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = NANDTESTA;
                second.d = NANDTESTB;
                aluFN.d = NANDOP;
                autoBrain.d = autoBrain.NAND;
              }
            autoBrain.NOR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.XNOR;
              }
              else {
                if (result.q == NORCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = NORTESTA;
                second.d = NORTESTB;
                aluFN.d = NOROP;
                autoBrain.d = autoBrain.NOR;
              }
            autoBrain.XNOR:  
              if (slowClockEdge.out == b1) {
                autoBrain.d = autoBrain.ADD;
              }
              else {
                if (result.q == XNORCORRECT) {
                  display.d[3] = 8ha; // 'P'
                }
                else {
                  display.d[3] = 8hd; // 'F'
                }
                first.d = XNORTESTA;
                second.d = XNORTESTB;
                aluFN.d = XNOROP;
                autoBrain.d = autoBrain.XNOR;
              }
          }
        }
    }
  }
}